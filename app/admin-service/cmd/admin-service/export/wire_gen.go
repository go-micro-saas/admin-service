// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package serviceexporter

import (
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/biz/biz"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/biz/event"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/conf"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/data/data"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/service/dto"
	"github.com/go-micro-saas/admin-service/app/admin-service/internal/service/service"
	"github.com/go-micro-saas/service-api/app/snowflake-service"
	"github.com/ikaiguang/go-srv-kit/service/cleanup"
	"github.com/ikaiguang/go-srv-kit/service/setup"
)

// Injectors from wire.go:

func exportServices(launcherManager setuputil.LauncherManager, hs *http.Server, gs *grpc.Server) (cleanuputil.CleanupManager, func(), error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, nil, err
	}
	authRepo, err := setuputil.GetAuthManager(launcherManager)
	if err != nil {
		return nil, nil, err
	}
	serviceAPIManager, err := setuputil.GetServiceAPIManager(launcherManager)
	if err != nil {
		return nil, nil, err
	}
	serviceConfig := conf.GetServiceConfig()
	getNodeIdReq, err := dto.ToPbGetNodeIdReq(serviceConfig)
	if err != nil {
		return nil, nil, err
	}
	v := snowflakeapi.DefaultOptions(logger)
	snowflake, cleanup, err := snowflakeapi.GetSingletonIDGeneratorByHTTPAPI(serviceAPIManager, getNodeIdReq, v...)
	if err != nil {
		return nil, nil, err
	}
	db, err := setuputil.GetRecommendDBConn(launcherManager)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userDataRepo := data.NewUserDataRepo(logger, db)
	userRegEmailDataRepo := data.NewUserRegEmailDataRepo(logger, db)
	userRegPhoneDataRepo := data.NewUserRegPhoneDataRepo(logger, db)
	userVerifyCodeDataRepo := data.NewUserVerifyCodeRepo(db)
	userAuthBizRepo := biz.NewUserAuthBiz(logger, authRepo, snowflake, userDataRepo, userRegEmailDataRepo, userRegPhoneDataRepo, userVerifyCodeDataRepo)
	sendEmailCodeConfig, err := dto.ToBoSendEmailCodeConfig(serviceConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sendEmailCodeBizRepo, cleanup2, err := biz.NewSendEmailCodeBiz(logger, sendEmailCodeConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	connectionWrapper, err := setuputil.GetRabbitmqConn(launcherManager)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sendEmailCodeEventRepo := events.NewSendEmailCodeEventRepo(logger, connectionWrapper)
	srvUserAuthV1Server := service.NewUserAuthService(logger, userAuthBizRepo, sendEmailCodeBizRepo, sendEmailCodeEventRepo)
	cleanupManager, err := service.RegisterServices(hs, gs, srvUserAuthV1Server)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return cleanupManager, func() {
		cleanup2()
		cleanup()
	}, nil
}
