// Package po
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package po

import (
	enumv1 "github.com/go-micro-saas/admin-service/api/admin-service/v1/enums"
	schemas "github.com/go-micro-saas/admin-service/app/admin-service/internal/data/schema/user_verify_code"
	randompkg "github.com/ikaiguang/go-srv-kit/kit/random"
	datatypes "gorm.io/datatypes"
	"gorm.io/gorm"
	time "time"
)

var DefaultVerifyCodeExpiredTime = time.Minute * 10

var _ = time.Time{}

var _ = datatypes.JSON{}

// UserVerifyCode ENGINE InnoDB CHARSET utf8mb4 COMMENT '用户验证码确认表'
type UserVerifyCode struct {
	Id            uint64                                       `gorm:"column:id;primaryKey" json:"id"`              // ID
	CreatedTime   time.Time                                    `gorm:"column:created_time" json:"created_time"`     // 创建时间
	UpdatedTime   time.Time                                    `gorm:"column:updated_time" json:"updated_time"`     // 最后修改时间
	VerifyAccount string                                       `gorm:"column:verify_account" json:"verify_account"` // 验证账户；手机、邮箱、。。。
	VerifyType    enumv1.UserVerifyTypeEnum_UserVerifyType     `gorm:"column:verify_type" json:"verify_type"`       // 验证方式；1：邮箱，2：手机，3：密码，。。。
	VerifyCode    string                                       `gorm:"column:verify_code" json:"verify_code"`       // 验证码
	VerifyStatus  enumv1.UserVerifyStatusEnum_UserVerifyStatus `gorm:"column:verify_status" json:"verify_status"`   // 确认状态；0：未指定，1：确认中，2：已确认，3：已过期，2：已取消
	ConfirmTime   uint64                                       `gorm:"column:confirm_time" json:"confirm_time"`     // 确认时间
	CancelTime    uint64                                       `gorm:"column:cancel_time" json:"cancel_time"`       // 取消时间
}

func (s *UserVerifyCode) CanVerification() bool {
	if time.Since(s.CreatedTime) > DefaultVerifyCodeExpiredTime {
		return false
	}
	switch s.VerifyStatus {
	default:
		return false
	case enumv1.UserVerifyStatusEnum_UNSPECIFIED, enumv1.UserVerifyStatusEnum_CONFIRMING:
		return true
	}
}

func NewVerifyCode() string {
	return randompkg.Numeric(4)
}

// NewUserVerifyCode default UserVerifyCode
func NewUserVerifyCode(code string) *UserVerifyCode {
	var (
		now = time.Now()
	)
	dataModel := &UserVerifyCode{
		Id:            0,
		CreatedTime:   now,
		UpdatedTime:   now,
		VerifyAccount: "",
		VerifyType:    enumv1.UserVerifyTypeEnum_UNSPECIFIED,
		VerifyCode:    code,
		VerifyStatus:  enumv1.UserVerifyStatusEnum_UNSPECIFIED,
		ConfirmTime:   0,
		CancelTime:    0,
	}
	return dataModel
}

type GetVerifyCodeParam struct {
	VerifyAccount     string                                         // 用户标识；手机、邮箱、。。。
	VerifyType        enumv1.UserVerifyTypeEnum_UserVerifyType       //
	VerifyCode        string                                         // 验证码
	VerifyStatusSlice []enumv1.UserVerifyStatusEnum_UserVerifyStatus //
	GTCreateTime      time.Time                                      // 创建时间
}

func (s *GetVerifyCodeParam) WhereConditions(dbConn *gorm.DB) *gorm.DB {
	dbConn = dbConn.Where(schemas.FieldVerifyAccount+" = ?", s.VerifyAccount).
		Where(schemas.FieldVerifyType+" = ?", s.VerifyType).
		Where(schemas.FieldVerifyCode+" = ?", s.VerifyCode)
	if len(s.VerifyStatusSlice) == 1 {
		dbConn = dbConn.Where(schemas.FieldVerifyStatus+" = ?", s.VerifyStatusSlice[0])
	} else if len(s.VerifyStatusSlice) > 1 {
		dbConn = dbConn.Where(schemas.FieldVerifyStatus+" IN (?)", s.VerifyStatusSlice)
	}
	if !s.GTCreateTime.IsZero() {
		dbConn = dbConn.Where(schemas.FieldCreatedTime+" > ?", s.GTCreateTime)
	}
	return dbConn
}
