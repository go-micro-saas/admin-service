// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNKNOWN.String() && e.Code == 500
}

// 未知错误
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	e := errors.New(500, ERROR_UNKNOWN.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

// 用户不存在
func IsS104UserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_NOT_EXIST.String() && e.Code == 400
}

// 用户不存在
func ErrorS104UserNotExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_NOT_EXIST.Number()))}
	return e
}

// 用户已存在
func IsS104UserExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_EXIST.String() && e.Code == 400
}

// 用户已存在
func ErrorS104UserExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_EXIST.Number()))}
	return e
}

// 用户名不合法
func IsS104UserNameInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_NAME_INVALID.String() && e.Code == 400
}

// 用户名不合法
func ErrorS104UserNameInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_NAME_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_NAME_INVALID.Number()))}
	return e
}

// 用户名已存在
func IsS104UserNameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_NAME_EXIST.String() && e.Code == 400
}

// 用户名已存在
func ErrorS104UserNameExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_NAME_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_NAME_EXIST.Number()))}
	return e
}

// 用户密码不合法
func IsS104UserPasswordInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_PASSWORD_INVALID.String() && e.Code == 400
}

// 用户密码不合法
func ErrorS104UserPasswordInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_PASSWORD_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_PASSWORD_INVALID.Number()))}
	return e
}

// 用户密码不正确
func IsS104UserPasswordIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_PASSWORD_INCORRECT.String() && e.Code == 400
}

// 用户密码不正确
func ErrorS104UserPasswordIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_PASSWORD_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_PASSWORD_INCORRECT.Number()))}
	return e
}

// 令牌已失效
func IsS104UserTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_TOKEN_INVALID.String() && e.Code == 400
}

// 令牌已失效
func ErrorS104UserTokenInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_TOKEN_INVALID.Number()))}
	return e
}

// 账户已过期
func IsS104UserAccountExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_ACCOUNT_EXPIRE.String() && e.Code == 400
}

// 账户已过期
func ErrorS104UserAccountExpire(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_ACCOUNT_EXPIRE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_ACCOUNT_EXPIRE.Number()))}
	return e
}

// 无效的登录状态
func IsS104UserStatusNotAllow(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_STATUS_NOT_ALLOW.String() && e.Code == 400
}

// 无效的登录状态
func ErrorS104UserStatusNotAllow(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_STATUS_NOT_ALLOW.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_STATUS_NOT_ALLOW.Number()))}
	return e
}

// 不在有效的激活期间
func IsS104UserActiveTimeInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_USER_ACTIVE_TIME_INVALID.String() && e.Code == 400
}

// 不在有效的激活期间
func ErrorS104UserActiveTimeInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_USER_ACTIVE_TIME_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_USER_ACTIVE_TIME_INVALID.Number()))}
	return e
}

// 无效的手机号
func IsS104InvalidPhone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_INVALID_PHONE.String() && e.Code == 400
}

// 无效的手机号
func ErrorS104InvalidPhone(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_INVALID_PHONE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_INVALID_PHONE.Number()))}
	return e
}

// 无效的邮箱
func IsS104InvalidEmail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_INVALID_EMAIL.String() && e.Code == 400
}

// 无效的邮箱
func ErrorS104InvalidEmail(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_INVALID_EMAIL.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_INVALID_EMAIL.Number()))}
	return e
}

// 密码不匹配
func IsS104PasswordNotMatchConfirm(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_PASSWORD_NOT_MATCH_CONFIRM.String() && e.Code == 400
}

// 密码不匹配
func ErrorS104PasswordNotMatchConfirm(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_PASSWORD_NOT_MATCH_CONFIRM.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_PASSWORD_NOT_MATCH_CONFIRM.Number()))}
	return e
}

// 密码不符合规则
func IsS104PasswordNotMatchRule(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_PASSWORD_NOT_MATCH_RULE.String() && e.Code == 400
}

// 密码不符合规则
func ErrorS104PasswordNotMatchRule(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_PASSWORD_NOT_MATCH_RULE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_PASSWORD_NOT_MATCH_RULE.Number()))}
	return e
}

// 密码不正确
func IsS104PasswordIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_PASSWORD_INCORRECT.String() && e.Code == 400
}

// 密码不正确
func ErrorS104PasswordIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_PASSWORD_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_PASSWORD_INCORRECT.Number()))}
	return e
}

// 验证码不正确
func IsS104VerifyCodeIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S104_VERIFY_CODE_INCORRECT.String() && e.Code == 400
}

// 验证码不正确
func ErrorS104VerifyCodeIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S104_VERIFY_CODE_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S104_VERIFY_CODE_INCORRECT.Number()))}
	return e
}
